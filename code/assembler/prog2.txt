ld r6 001             #nop(setup phase)
ld r0 111             #r0 = 7
add r0 r6             #r0 = 8
add r0 r6             #r0 = 9
ld r1 000             #r1 = 0
add r1 r7             #r1 = 64
add r1 r1             #r1 = 'b1000_0000
add r7 r0             #r7 = 73
sw r1 r7              #mem[73] = 'b1000_0000
xor r0 r5             #r0 = ~r0
add r0 r6             #r0 = -9
jmp r5 000            #reset carry
add r7 r0             #r7 = 64
jmp r5 000            #reset carry(setup ends)
xor r2 r5             #r2 = ~r2(i loop jump back to here)
add r2 r6             #r2 = r2+1(-i)
jmp r5 000            #reset carry
add r7 r5             #r7 = len(n)-1
jmp r5 000            #reset carry
add r7 r5             #r7 = len(n)-2
jmp r5 000            #reset carry
add r2 r7             #r2 = len(n)-2-i
jmp r5 000            #reset carry
add r7 r6             #r7 = len(n)-1
add r7 r6             #r7 = len(n)
jmp r2 110            #for i in range(len(n)-1)
ld r2 110             #r2 = 6
add r7 r2             #r7 = 70
lw r2 r7              #r2 = mem[70](i)
ld r3 010             #r3 = 2
add r3 r2             #r3(j) = r2(i)+2
add r7 r6             #r7 = 71
sw r3 r7              #mem[71](j) = r3
ld r0 111             #r0 = 7
xor r0 r5             #r0 = ~r0
add r0 r6             #r0 = r0+1(-r0)
jmp r5 000            #reset carry
add r7 r0             #r7 = len(n)
xor r3 r5             #r3 = ~r3(j loop jump back to here)
add r3 r6             #r3 = r3+1(-j)
jmp r5 000            #reset carry
add r3 r7             #r3 = len(n)-j
jmp r5 000            #reset carry
jmp r3 100            #for j in range(i+2, len(n))
ld r0 110             #r0 = 6
add r7 r0             #r7 = 70
lw r2 r7              #r2 = mem[70](i)
ld r3 000             #r3 = 0
add r3 r2             #r3 = r2(i)
lw r2 r2              #r2 = n[i]
add r3 r6             #r3 = i+1
lw r3 r3              #r3 = n[i+1]
add r7 r6             #r7 = 71
lw r0 r7              #r0 = j
ld r1 000             #r1 = 0
add r1 r0             #r1 = j
lw r0 r0              #r0 = n[j]
add r1 r6             #r1 = j+1
lw r1 r1              #r1 = n[j+1]
add r7 r6             #r7 = 72
add r7 r6             #r7 = 73
lw r4 r7              #r4 = 'b1000_0000
pos r2 010            #if n[i]>=0:
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = -n[j+1]
xor r0 r5             #r0 = -n[j]
jmp r5 000            #reset carry
add r3 r1             #r3 = n[i+1]-n[j+1]
add r2 r0             #r2 = n[i]-n[j]
jmp r5 000            #reset carry
pos r2 000            #if n[i]-n[j]>=0:
pos r5 001            #else if n[i]-n[j]<0:
xor r3 r5             #r3 = ~r3
add r3 r6             #r3 = abs(n[i+1]-n[j+1])
xor r2 r5             #r2 = abs(n[i]-n[j])
jmp r5 000            #reset carry
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
pos r5 010            #else if n[i]<0:
xor r3 r5             #r3 = ~r3
add r3 r6             #r3 = -n[i+1]
xor r2 r5             #r2 = -n[i]
jmp r5 000            #reset carry
add r3 r1             #r3 = n[j+1]-n[i+1]
add r2 r0             #r2 = n[j]-n[i]
jmp r5 000            #reset carry
pos r2 000            #if n[i]-n[j]>=0:
pos r5 001            #else if n[i]-n[j]<0:
xor r3 r5             #r3 = ~r3
add r3 r6             #r3 = abs(n[i+1]-n[j+1])
xor r2 r5             #r2 = abs(n[i]-n[j])
jmp r5 000            #reset carry
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
add r7 r5             #r7 = 72
jmp r5 000            #reset carry
add r7 r5             #r7 = 71
jmp r5 000            #reset carry
add r7 r5             #r7 = 70
jmp r5 000            #reset carry
add r7 r5             #r7 = 69
jmp r5 000            #reset carry
add r7 r5             #r7 = 68
jmp r5 000            #reset carry
add r7 r5             #r7 = 67
jmp r5 000            #reset carry
lw r1 r7              #r1 = minLSB
add r7 r5             #r7 = 66
jmp r5 000            #reset carry
lw r0 r7              #r0 = minMSB
pos r2 010            #if abs(n[i]-n[j])[7]==0:
pos r0 001            #if minMSB[7]==0:
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = -minLSB
xor r0 r5             #r0 = -minMSB
jmp r5 000            #reset carry
add r1 r3             #r1 = abs(n[i+1]-n[j+1])-minLSB
add r0 r2             #r0 = abs(n[i]-n[j])-minMSB
jmp r5 000            #reset carry; if abs(n[i]-n[j])>=minMSB:
pos r0 000            #else if abs(n[i]-n[j])<minMSB:
pos r5 001            #else if minMSB[7]==1:
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
sw r2 r7              #mem[66] = update minMSB
add r7 r6             #r7 = 67
sw r3 r7              #mem[67] = update minLSB
add r7 r5             #r7 = 66
jmp r5 000            #reset carry
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
pos r5 010            #else if abs(n[i]-n[j])[7]==1:
pos r0 000            #if minMSB[7]==0:
pos r5 010            #else if minMSB[7]==1:
add r2 r2             #r2 = r2+r2
rst r2 000            #r2 = abs[6:0]
add r0 r0             #r0 = r0+r0
rst r0 000            #r0 = maxMSB[6:0]
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = -maxLSB
xor r0 r5             #r0 = -maxMSB
jmp r5 000            #reset carry
add r1 r3             #r1 = abs(n[i+1]-n[j+1])[6:0]-minLSB[6:0]
add r0 r2             #r0 = abs(n[i]-n[j])[6:0]-minMSB[6:0]
jmp r5 000            #reset carry
pos r0 000            #if abs(n[i]-n[j])[6:0]>=minMSB[6:0]:
pos r5 001            #else if abs(n[i]-n[j])[6:0]<minMSB[6:0]:
add r2 r4             #r2 = abs
jmp r5 000            #reset carry
sw r2 r7              #mem[66] = update minMSB
add r7 r6             #r7 = 67
sw r3 r7              #mem[67] = update minLSB
add r7 r5             #r7 = 66
jmp r5 000            #reset carry
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
add r7 r6             #r7 = 67
add r7 r6             #r7 = 68
lw r0 r7              #r0 = maxMSB
add r7 r6             #r7 = 69
lw r1 r7              #r1 = maxLSB
add r7 r5             #r7 = 68
jmp r5 000            #reset carry
pos r2 010            #if abs(n[i]-n[j])[7]==0:
pos r0 001            #if maxMSB[7]==0:
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = -maxLSB
xor r0 r5             #r0 = -maxMSB
jmp r5 000            #reset carry
add r1 r3             #r1 = abs(n[i+1]-n[j+1])-maxLSB
add r0 r2             #r0 = abs(n[i]-n[j])-maxMSB
jmp r5 000            #reset carry
pos r0 001            #if abs(n[i]-n[j])>=maxMSB:
sw r2 r7              #mem[68] = update maxMSB
add r7 r6             #r7 = 69
sw r3 r7              #mem[69] = update maxLSB
add r7 r5             #r7 = 68
jmp r5 000            #reset carry
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
pos r5 010            #else if abs(n[i]-n[j])[7]==1:
pos r0 001            #if maxMSB[7]==0:
sw r2 r7              #mem[68] = update maxMSB
add r7 r6             #r7 = 69
sw r3 r7              #mem[69] = update maxLSB
add r7 r5             #r7 = 68
jmp r5 000            #reset carry
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
pos r5 010            #else if maxMSB[7]==1:
add r2 r2             #r2 = r2+r2
rst r2 000            #r2 = abs[6:0]
add r0 r0             #r0 = r0+r0
rst r0 000            #r0 = minMSB[6:0]
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = -minLSB
xor r0 r5             #r0 = -minMSB
jmp r5 000            #reset carry
add r1 r3             #r1 = abs(n[i+1]-n[j+1])[6:0]-maxLSB[6:0]
add r0 r2             #r0 = abs(n[i]-n[j])[6:0]-maxMSB[6:0]
jmp r5 000            #reset carry
pos r0 001            #if abs(n[i]-n[j])[6:0]>=maxMSB[6:0]:
add r2 r4             #r2 = abs
sw r2 r7              #mem[68] = update maxMSB
add r7 r6             #r7 = 69
sw r3 r7              #mem[69] = update maxLSB
add r7 r5             #r7 = 68
jmp r5 000            #reset carry
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r3 011             #r3 = 3
add r7 r3             #r7 = 71
lw r3 r7              #r3 = j
add r3 r6             #j+=1
add r3 r6             #j+=1
sw r3 r7              #mem[71] = j
ld r4 111             #r4 = 7
xor r4 r5             #r4 = ~r4
add r4 r6             #r4 = r4+1(-7)
jmp r5 000            #reset carry
add r7 r4             #r7 = 64
pos r5 101            #jump back to j for loop
ld r0 110             #r0 = 6
add r7 r0             #r7 = 70
lw r2 r7              #r2 = i
add r2 r6             #i+=1
add r2 r6             #i+=1
sw r2 r7              #mem[70] = i
ld r4 110             #r4 = 6
xor r4 r5             #r4 = ~r4
add r4 r6             #r4 = r4+1(-6)
jmp r5 000            #reset carry
add r7 r4             #r7 = 64
pos r5 111            #jump back to i for loop
ld r0 000             #r0 = 0
ld r1 000             #r1 = 0
ld r2 000             #r2 = 0
ld r3 000             #r3 = 0
ld r4 000             #r4 = 0
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop