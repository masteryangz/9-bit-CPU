000110001 //nop(setup phase)
100010101 //r2 = ~r2(i loop jump back to here)
010010110 //r2 = r2+1(-i)
101101000 //reset carry
010111101 //r7 = len(n)-1
101101000 //reset carry
010111101 //r7 = len(n)-2
101101000 //reset carry
010010111 //r2 = len(n)-2-i
101101000 //reset carry
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101010110 //for i in range(len(n)-1)
000010110 //r2 = 6
010111010 //r7 = 70
110010111 //r2 = mem[70](i)
000011010 //r3 = 2
010011010 //r3(j) = r2(i)+2
010111110 //r7 = 71
111011111 //mem[71](j) = r3
000000111 //r0 = 7
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-r0)
101101000 //reset carry
010111000 //r7 = len(n)
100011101 //r3 = ~r3(j loop jump back to here)
010011110 //r3 = r3+1(-j)
101101000 //reset carry
010011111 //r3 = len(n)-j
101101000 //reset carry
101011100 //for j in range(i+2, len(n))
000000111 //r0 = 7
010111000 //r7 = 71
110011111 //r3 = mem[71](j)
000010000 //r2 = 0
010010011 //r2 = r3(j)
110011011 //r3 = n[j]
010010110 //r2 = j+1
110010010 //r2 = n[j+1]
100010101 //r2 = ~r2
010010110 //r2 = r2+1(-n[j+1])
100011101 //r3 = ~r3(-n[j])
101101000 //reset carry
010111101 //r7 = 70
101101000 //reset carry
110000111 //r0 = i
110000000 //r0 = n[i]
110001111 //r1 = i
010001110 //r1 = i+1
010111101 //r7 = 69
101101000 //reset carry
010111101 //r7 = 68
101101000 //reset carry
010111101 //r7 = 67
101101000 //reset carry
010111101 //r7 = 66
101101000 //reset carry
110001001 //r1 = n[i+1]
010001010 //r1 = n[i+1]-n[j+1]
010000011 //r0 = n[i]-n[j]
101101000 //reset carry
011001000 //if n[i]-n[j]>=0:
011101001 //else if n[i]-n[j]<0:
100001101 //r1 = ~r1
010001110 //r1 = -(n[i+1]-n[j+1])
100000101 //r0 = -(n[i]-n[j])
101101000 //reset carry
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop(end if)
110010111 //r2 = minMSB
010111110 //r7 = 67
110011111 //r3 = minLSB
010111101 //r7 = 66
101101000 //reset carry
100011101 //r3 = ~r3
010011110 //r3 = -minLSB
100010101 //r2 = -minMSB
101101000 //reset carry
010011001 //r3 = n[i+1]-n[j+1]-minLSB
010010000 //r2 = n[i]-n[j]-minMSB
011010000 //if setBits>=min:
011101001 //else if setBits<min:
111000111 //mem[66] = update minMSB
010111110 //r7 = 67
111001111 //mem[67] = update minLSB
010111101 //r7 = 66
101101000 //reset carry
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop(end if)
010111110 //r7 = 67
010111110 //r7 = 68
110010111 //r2 = maxMSB
010111110 //r7 = 69
110011111 //r3 = maxLSB
010111101 //r7 = 68
101101000 //reset carry
100011101 //r3 = ~r3
010011110 //r3 = -maxLSB
100010101 //r2 = -maxMSB
101101000 //reset carry
010011001 //r3 = n[i+1]-n[j+1]-maxLSB
010010000 //r2 = n[i]-n[j]-maxMSB
011010001 //if setBits>=max:
111000111 //mem[68] = update maxMSB
010111110 //r7 = 69
111001111 //mem[69] = update maxLSB
010111101 //r7 = 68
101101000 //reset carry
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop(end if)
000011011 //r3 = 3
010111011 //r7 = 71
110011111 //r3 = j
010011110 //j+=1
010011110 //j+=1
111011111 //mem[71] = j
000100111 //r4 = 7
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-7)
101101000 //reset carry
010111100 //r7 = 64
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101101 //jump back to j for loop
110010111 //r2 = i
010010110 //i+=1
010010110 //i+=1
111010111 //mem[70] = i
000100110 //r4 = 6
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-6)
101101000 //reset carry
010111100 //r7 = 64
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101111 //jump back to i for loop
000000000 //r0 = 0
000001000 //r1 = 0
000010000 //r2 = 0
000011000 //r3 = 0
000100000 //r4 = 0
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
